#
# Nimbus
# CI
# Rotate IP Action
#

name: "Rotate IP"
description: >-
  Rotates external IPs of Kubernetes LoadBalancer services by deleting
  and recreating the service. Propagates changes in IP to DNS records
  with a 'terraform apply' targeted at DNS records.
inputs:
  namespace:
    description: K8s namespace of the service to be rotated.
    default: default
  name:
    description: Name of the K8s service to be rotated.
  dns_record:
    description: Fully qualified reference to the Terraform DNS record resource
      to propagate IP changes to.
runs:
  using: composite
  steps:
    - name: "Export proxy K8s services"
      shell: bash
      run: |
        set -ex -o pipefail
        kubectl get service -n ${{ inputs.namespace }} ${{ inputs.name }} -o yaml | \
        # clean up attributes from k8s services that will hamper their reimport
        yq 'del(.metadata.annotations.["kubectl.kubernetes.io/last-applied-configuration"]) |
            del(.status)  |
            del(.spec.clusterIP) |
            del(.spec.clusterIPs) |
            del(.. |
            select(has("nodePort")) | .nodePort)' > service.yaml
    - name: "Delete proxy K8s services"
      shell: bash
      run: kubectl delete service -n ${{ inputs.namespace }} ${{ inputs.name }}
    - name: "Reapply Proxy K8s services"
      shell: bash
      run: kubectl apply -f service.yaml
    - name: "Wait for K8s Service external IP"
      shell: bash
      run: |
        set -e -o pipefail
        wait_external_ip() {
          while [ -z "$(kubectl get -n $1 svc/$2 -o=jsonpath='{.status.loadBalancer}' |
          grep 'ingress')" ]
          do
          echo "Waiting 5 seconds for service $1 to be assigned an external IP."
          sleep 5
          done
        }
        # wait for services external ip of services to be assigned
        wait_external_ip ${{ inputs.namespace }} ${{ inputs.name }}
    - name: "Update DNS records with Rotated IP"
      shell: bash
      working-directory: terraform
      run: >
        terraform apply
        -auto-approve=true
        -target='${{ inputs.dns_record }}'
